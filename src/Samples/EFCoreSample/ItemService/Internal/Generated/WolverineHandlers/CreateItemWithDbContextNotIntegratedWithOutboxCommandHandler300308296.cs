// <auto-generated/>
#pragma warning disable
using Lamar;

namespace Internal.Generated.WolverineHandlers
{
    // START: CreateItemWithDbContextNotIntegratedWithOutboxCommandHandler300308296
    public class CreateItemWithDbContextNotIntegratedWithOutboxCommandHandler300308296 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Lamar.IContainer _rootContainer;

        public CreateItemWithDbContextNotIntegratedWithOutboxCommandHandler300308296(Lamar.IContainer rootContainer)
        {
            _rootContainer = rootContainer;
        }

        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            await using var nestedContainer = (Lamar.IContainer)_rootContainer.GetNestedContainer();
            
            /*
            * Dependency: Lambda Factory of DbContextOptions<ItemService.ItemsDbContextWithoutOutbox>
            * The scoping is Scoped, so a Lambda registration requires
            * the usage of a nested container for resolution for correct scoping.
            * A formal factory provider may be an alternative
            */
            var itemsDbContextWithoutOutbox = nestedContainer.GetInstance<ItemService.ItemsDbContextWithoutOutbox>();
            // The actual message body
            var createItemWithDbContextNotIntegratedWithOutboxCommand = (ItemService.CreateItemWithDbContextNotIntegratedWithOutboxCommand)context.Envelope.Message;

            
            // Enroll the DbContext & IMessagingContext in the outgoing Wolverine outbox transaction
            var envelopeTransaction = Wolverine.EntityFrameworkCore.WolverineEntityCoreExtensions.BuildTransaction(itemsDbContextWithoutOutbox, context);
            await context.EnlistInOutboxAsync(envelopeTransaction);
            
            // The actual message execution
            var outgoing1 = ItemService.CreateItemWithDbContextNotIntegratedWithOutboxCommandHandler.Handle(createItemWithDbContextNotIntegratedWithOutboxCommand, itemsDbContextWithoutOutbox);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

            
            // Added by EF Core Transaction Middleware
            var result_of_SaveChangesAsync = await itemsDbContextWithoutOutbox.SaveChangesAsync(cancellation).ConfigureAwait(false);

            // If we have separate context for outbox and application, then we need to manually commit the transaction
            if (envelopeTransaction is Wolverine.EntityFrameworkCore.Internals.RawDatabaseEnvelopeTransaction rawTx) { await rawTx.CommitAsync(); }
        }
    }

    // END: CreateItemWithDbContextNotIntegratedWithOutboxCommandHandler300308296
    
    
}