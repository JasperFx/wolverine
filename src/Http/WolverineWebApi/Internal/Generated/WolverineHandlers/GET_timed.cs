// <auto-generated/>
#pragma warning disable
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.Logging;
using System;
using System.Linq;
using Wolverine.Http;

namespace Internal.Generated.WolverineHandlers
{
    // START: GET_timed
    public class GET_timed : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _wolverineHttpOptions;
        private readonly Microsoft.Extensions.Logging.ILogger<WolverineWebApi.MeasuredEndpoint> _loggerForMessage;

        public GET_timed(Wolverine.Http.WolverineHttpOptions wolverineHttpOptions, Microsoft.Extensions.Logging.ILogger<WolverineWebApi.MeasuredEndpoint> loggerForMessage) : base(wolverineHttpOptions)
        {
            _wolverineHttpOptions = wolverineHttpOptions;
            _loggerForMessage = loggerForMessage;
        }

        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            var stopwatchMiddleware = new WolverineWebApi.StopwatchMiddleware();
            var measuredEndpoint = new WolverineWebApi.MeasuredEndpoint();
            stopwatchMiddleware.Before();
            
            // The actual HTTP request handler execution
            var result_of_Get = await measuredEndpoint.Get().ConfigureAwait(false);

            stopwatchMiddleware.Finally(((Microsoft.Extensions.Logging.ILogger)_loggerForMessage), httpContext);
            await WriteString(httpContext, result_of_Get);
        }
    }

    // END: GET_timed
    
    
}