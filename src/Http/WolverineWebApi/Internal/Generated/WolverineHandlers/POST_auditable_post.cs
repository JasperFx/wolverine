// <auto-generated/>
#pragma warning disable
using Microsoft.AspNetCore.Routing;
using System;
using System.Linq;
using Wolverine.Http;
using Wolverine.Runtime;

namespace Internal.Generated.WolverineHandlers
{
    // START: POST_auditable_post
    public class POST_auditable_post : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _wolverineHttpOptions;
        private readonly Wolverine.Runtime.IWolverineRuntime _wolverineRuntime;

        public POST_auditable_post(Wolverine.Http.WolverineHttpOptions wolverineHttpOptions, Wolverine.Runtime.IWolverineRuntime wolverineRuntime) : base(wolverineHttpOptions)
        {
            _wolverineHttpOptions = wolverineHttpOptions;
            _wolverineRuntime = wolverineRuntime;
        }

        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            var messageContext = new Wolverine.Runtime.MessageContext(_wolverineRuntime);
            var auditableEndpoint = new WolverineWebApi.AuditableEndpoint();
            // Reading the request body via JSON deserialization
            var (body, jsonContinue) = await ReadJsonAsync<WolverineWebApi.AuditablePostBody>(httpContext);
            if (jsonContinue == Wolverine.HandlerContinuation.Stop) return;
            // Application-specific Open Telemetry auditing
            System.Diagnostics.Activity.Current?.SetTag("id", body.Id);
            
            // The actual HTTP request handler execution
            var result_of_Post = auditableEndpoint.Post(body);

            
            // Outgoing, cascaded message
            await messageContext.EnqueueCascadingAsync(result_of_Post).ConfigureAwait(false);

            // Wolverine automatically sets the status code to 204 for empty responses
            if (!httpContext.Response.HasStarted) httpContext.Response.StatusCode = 204;
            
            // Making sure there is at least one call to flush outgoing, cascading messages
            await messageContext.FlushOutgoingMessagesAsync().ConfigureAwait(false);

        }
    }

    // END: POST_auditable_post
    
    
}