// <auto-generated/>
#pragma warning disable
using Microsoft.AspNetCore.Routing;
using System;
using System.Linq;
using Wolverine.Http;
using Wolverine.Marten.Publishing;
using Wolverine.Runtime;

namespace Internal.Generated.WolverineHandlers
{
    // START: POST_sti_multiples
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class POST_sti_multiples : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _wolverineHttpOptions;
        private readonly Wolverine.Runtime.IWolverineRuntime _wolverineRuntime;
        private readonly Wolverine.Marten.Publishing.OutboxedSessionFactory _outboxedSessionFactory;

        public POST_sti_multiples(Wolverine.Http.WolverineHttpOptions wolverineHttpOptions, Wolverine.Runtime.IWolverineRuntime wolverineRuntime, Wolverine.Marten.Publishing.OutboxedSessionFactory outboxedSessionFactory) : base(wolverineHttpOptions)
        {
            _wolverineHttpOptions = wolverineHttpOptions;
            _wolverineRuntime = wolverineRuntime;
            _outboxedSessionFactory = outboxedSessionFactory;
        }



        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            var messageContext = new Wolverine.Runtime.MessageContext(_wolverineRuntime);
            // Building the Marten session
            await using var documentSession = _outboxedSessionFactory.OpenSession(messageContext);
            // Reading the request body via JSON deserialization
            var (command, jsonContinue) = await ReadJsonAsync<WolverineWebApi.Marten.IncrementBOnBoth>(httpContext);
            if (jsonContinue == Wolverine.HandlerContinuation.Stop) return;
            var batchedQuery = documentSession.CreateBatchQuery();

            var stream_stream1_BatchItem = batchedQuery.Events.FetchForWriting<WolverineWebApi.Marten.StrongLetterAggregate>(command.Id1.Value);

            var stream_stream2_BatchItem = batchedQuery.Events.FetchForWriting<WolverineWebApi.Marten.StrongLetterAggregate>(command.Id2.Value);

            await batchedQuery.Execute(httpContext.RequestAborted);

            // Loading Marten aggregate as part of the aggregate handler workflow
            var stream_stream1 = await stream_stream1_BatchItem.ConfigureAwait(false);
            // 404 if this required object is null
            if (stream_stream1.Aggregate == null)
            {
                httpContext.Response.StatusCode = 404;
                return;
            }

            // Loading Marten aggregate as part of the aggregate handler workflow
            var stream_stream2 = await stream_stream2_BatchItem.ConfigureAwait(false);
            // 404 if this required object is null
            if (stream_stream2.Aggregate == null)
            {
                httpContext.Response.StatusCode = 404;
                return;
            }

            
            // The actual HTTP request handler execution
            WolverineWebApi.Marten.StrongLetterHandler.Handle(command, stream_stream1, stream_stream2);

            
            // Save all pending changes to this Marten session
            await documentSession.SaveChangesAsync(httpContext.RequestAborted).ConfigureAwait(false);

            
            // Have to flush outgoing messages just in case Marten did nothing because of https://github.com/JasperFx/wolverine/issues/536
            await messageContext.FlushOutgoingMessagesAsync().ConfigureAwait(false);

            // Wolverine automatically sets the status code to 204 for empty responses
            if (httpContext.Response is { HasStarted: false, StatusCode: 200 }) httpContext.Response.StatusCode = 204;
        }

    }

    // END: POST_sti_multiples
    
    
}

