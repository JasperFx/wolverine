// <auto-generated/>
#pragma warning disable
using FluentValidation;
using Microsoft.AspNetCore.Routing;
using System;
using System.Linq;
using Wolverine.Http;
using Wolverine.Http.FluentValidation;

namespace Internal.Generated.WolverineHandlers
{
    // START: GET_asparameters_validated
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class GET_asparameters_validated : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _wolverineHttpOptions;
        private readonly Wolverine.Http.FluentValidation.IProblemDetailSource<WolverineWebApi.ValidatedQuery> _problemDetailSource;
        private readonly FluentValidation.IValidator<WolverineWebApi.ValidatedQuery> _validator;

        public GET_asparameters_validated(Wolverine.Http.WolverineHttpOptions wolverineHttpOptions, Wolverine.Http.FluentValidation.IProblemDetailSource<WolverineWebApi.ValidatedQuery> problemDetailSource, FluentValidation.IValidator<WolverineWebApi.ValidatedQuery> validator) : base(wolverineHttpOptions)
        {
            _wolverineHttpOptions = wolverineHttpOptions;
            _problemDetailSource = problemDetailSource;
            _validator = validator;
        }



        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            // Binding Form & Querystring values to the argument marked with [AsParameters]
            var validatedQuery = new WolverineWebApi.ValidatedQuery();
            validatedQuery.Name = httpContext.Request.Query["Name"];
            
            // Execute FluentValidation validators
            var result1 = await Wolverine.Http.FluentValidation.Internals.FluentValidationHttpExecutor.ExecuteOne<WolverineWebApi.ValidatedQuery>(_validator, _problemDetailSource, validatedQuery).ConfigureAwait(false);

            // Evaluate whether or not the execution should be stopped based on the IResult value
            if (result1 != null && !(result1 is Wolverine.Http.WolverineContinue))
            {
                await result1.ExecuteAsync(httpContext).ConfigureAwait(false);
                return;
            }


            
            // The actual HTTP request handler execution
            var result_of_Get = WolverineWebApi.ValidatedAsParametersEndpoint.Get(validatedQuery);

            await WriteString(httpContext, result_of_Get);
        }

    }

    // END: GET_asparameters_validated
    
    
}

