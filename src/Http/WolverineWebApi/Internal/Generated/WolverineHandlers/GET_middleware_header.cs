// <auto-generated/>
#pragma warning disable
using Microsoft.AspNetCore.Routing;
using System;
using System.Linq;
using Wolverine.Http;

namespace Internal.Generated.WolverineHandlers
{
    // START: GET_middleware_header
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class GET_middleware_header : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _wolverineHttpOptions;

        public GET_middleware_header(Wolverine.Http.WolverineHttpOptions wolverineHttpOptions) : base(wolverineHttpOptions)
        {
            _wolverineHttpOptions = wolverineHttpOptions;
        }



        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            var headerMiddleware = new WolverineWebApi.HeaderMiddleware();
            var valueEndpoint = ReadSingleHeaderValue(httpContext, "x-handler");
            var valueMiddleware = ReadSingleHeaderValue(httpContext, "x-middleware");
            var middlewareResult = headerMiddleware.Before(valueMiddleware);
            var valueBefore = ReadSingleHeaderValue(httpContext, "x-before");
            var middlewareEndpoint = new WolverineWebApi.MiddlewareEndpoint();
            var beforeResult = middlewareEndpoint.Before(valueBefore);
            
            // The actual HTTP request handler execution
            var result_response = middlewareEndpoint.HandleGet(valueEndpoint, beforeResult, middlewareResult);

            // Writing the response body to JSON because this was the first 'return variable' in the method signature
            await WriteJsonAsync(httpContext, result_response);
        }

    }

    // END: GET_middleware_header
    
    
}

