// <auto-generated/>
#pragma warning disable
using Microsoft.AspNetCore.Routing;
using System;
using System.Linq;
using Wolverine.Http;

namespace Internal.Generated.WolverineHandlers
{
    // START: POST_api_asparameters1
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class POST_api_asparameters1 : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _wolverineHttpOptions;

        public POST_api_asparameters1(Wolverine.Http.WolverineHttpOptions wolverineHttpOptions) : base(wolverineHttpOptions)
        {
            _wolverineHttpOptions = wolverineHttpOptions;
        }



        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            // Binding Form & Querystring values to the argument marked with [AsParameters]
            var asParametersQuery = new WolverineWebApi.AsParametersQuery();
            string EnumFromQuery_rawValue = httpContext.Request.Query["EnumFromQuery"];

            if (WolverineWebApi.Direction.TryParse<WolverineWebApi.Direction>(EnumFromQuery_rawValue, true, out var EnumFromQuery))
            {
                asParametersQuery.EnumFromQuery = EnumFromQuery;
            }

            string EnumFromForm_rawValue = httpContext.Request.Form["EnumFromForm"];

            if (WolverineWebApi.Direction.TryParse<WolverineWebApi.Direction>(EnumFromForm_rawValue, true, out var EnumFromForm))
            {
                asParametersQuery.EnumFromForm = EnumFromForm;
            }

            asParametersQuery.StringFromQuery = httpContext.Request.Query["StringFromQuery"];
            asParametersQuery.StringFromForm = httpContext.Request.Form["StringFromForm"];
            string IntegerFromQuery_rawValue = httpContext.Request.Query["IntegerFromQuery"];

            if (IntegerFromQuery_rawValue != null && int.TryParse(IntegerFromQuery_rawValue, System.Globalization.CultureInfo.InvariantCulture, out var IntegerFromQuery))
            {
                asParametersQuery.IntegerFromQuery = IntegerFromQuery;
            }

            string IntegerFromForm_rawValue = httpContext.Request.Form["IntegerFromForm"];

            if (IntegerFromForm_rawValue != null && int.TryParse(IntegerFromForm_rawValue, System.Globalization.CultureInfo.InvariantCulture, out var IntegerFromForm))
            {
                asParametersQuery.IntegerFromForm = IntegerFromForm;
            }

            string FloatFromQuery_rawValue = httpContext.Request.Query["FloatFromQuery"];

            if (FloatFromQuery_rawValue != null && System.Single.TryParse(FloatFromQuery_rawValue, System.Globalization.CultureInfo.InvariantCulture, out var FloatFromQuery))
            {
                asParametersQuery.FloatFromQuery = FloatFromQuery;
            }

            string FloatFromForm_rawValue = httpContext.Request.Form["FloatFromForm"];

            if (FloatFromForm_rawValue != null && System.Single.TryParse(FloatFromForm_rawValue, System.Globalization.CultureInfo.InvariantCulture, out var FloatFromForm))
            {
                asParametersQuery.FloatFromForm = FloatFromForm;
            }

            string BooleanFromQuery_rawValue = httpContext.Request.Query["BooleanFromQuery"];

            if (bool.TryParse(BooleanFromQuery_rawValue, out var BooleanFromQuery))
            {
                asParametersQuery.BooleanFromQuery = BooleanFromQuery;
            }

            string BooleanFromForm_rawValue = httpContext.Request.Form["BooleanFromForm"];

            if (bool.TryParse(BooleanFromForm_rawValue, out var BooleanFromForm))
            {
                asParametersQuery.BooleanFromForm = BooleanFromForm;
            }

            asParametersQuery.StringHeader = ReadSingleHeaderValue(httpContext, "x-string");
            string NumberHeader_rawValue = ReadSingleHeaderValue(httpContext, "x-number");

            if (NumberHeader_rawValue != null && int.TryParse(NumberHeader_rawValue, System.Globalization.CultureInfo.InvariantCulture, out var NumberHeader))
            {
                asParametersQuery.NumberHeader = NumberHeader;
            }

            string NullableHeader_rawValue = ReadSingleHeaderValue(httpContext, "x-nullable-number");

            if (NullableHeader_rawValue != null && int.TryParse(NullableHeader_rawValue, System.Globalization.CultureInfo.InvariantCulture, out var NullableHeader_parsed))
            {
                asParametersQuery.NullableHeader = NullableHeader_parsed;
            }

            
            // The actual HTTP request handler execution
            var asParametersQuery_response = WolverineWebApi.AsParametersEndpoints.Post(asParametersQuery);

            // Writing the response body to JSON because this was the first 'return variable' in the method signature
            await WriteJsonAsync(httpContext, asParametersQuery_response);
        }

    }

    // END: POST_api_asparameters1
    
    
}

