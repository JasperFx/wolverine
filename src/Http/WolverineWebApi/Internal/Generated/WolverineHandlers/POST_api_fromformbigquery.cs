// <auto-generated/>
#pragma warning disable
using Microsoft.AspNetCore.Routing;
using System;
using System.Linq;
using Wolverine.Http;

namespace Internal.Generated.WolverineHandlers
{
    // START: POST_api_fromformbigquery
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class POST_api_fromformbigquery : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _wolverineHttpOptions;

        public POST_api_fromformbigquery(Wolverine.Http.WolverineHttpOptions wolverineHttpOptions) : base(wolverineHttpOptions)
        {
            _wolverineHttpOptions = wolverineHttpOptions;
        }



        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            // Binding Form values to the argument marked with [FromForm]
            var bigQuery = new WolverineWebApi.BigQuery();
            bigQuery.Name = httpContext.Request.Form["Name"];
            string Number_rawValue = httpContext.Request.Form["Number"];

            if (Number_rawValue != null && int.TryParse(Number_rawValue, System.Globalization.CultureInfo.InvariantCulture, out var Number))
            {
                bigQuery.Number = Number;
            }

            string Direction_rawValue = httpContext.Request.Form["Direction"];

            if (WolverineWebApi.Direction.TryParse<WolverineWebApi.Direction>(Direction_rawValue, true, out var Direction))
            {
                bigQuery.Direction = Direction;
            }

            bigQuery.Values = httpContext.Request.Form["Values"].ToArray();
            var Numbers_List = new System.Collections.Generic.List<int>();
            foreach (var NumbersValue in httpContext.Request.Form["Numbers"])
            {
                if (int.TryParse(NumbersValue, System.Globalization.CultureInfo.InvariantCulture, out var NumbersValueParsed))
                {
                    Numbers_List.Add(NumbersValueParsed);
                }

            }

            if (Numbers_List.Any()) bigQuery.Numbers = Numbers_List.ToArray();
            string Flag_rawValue = httpContext.Request.Form["Flag"];

            if (bool.TryParse(Flag_rawValue, out var Flag))
            {
                bigQuery.Flag = Flag;
            }

            string NullableNumber_rawValue = httpContext.Request.Form["NullableNumber"];

            if (NullableNumber_rawValue != null && int.TryParse(NullableNumber_rawValue, System.Globalization.CultureInfo.InvariantCulture, out var NullableNumber_parsed))
            {
                bigQuery.NullableNumber = NullableNumber_parsed;
            }

            string NullableDirection_rawValue = httpContext.Request.Form["NullableDirection"];

            if (WolverineWebApi.Direction.TryParse<WolverineWebApi.Direction>(NullableDirection_rawValue, true, out var NullableDirection_parsed))
            {
                bigQuery.NullableDirection = NullableDirection_parsed;
            }

            string NullableFlag_rawValue = httpContext.Request.Form["NullableFlag"];

            if (bool.TryParse(NullableFlag_rawValue, out var NullableFlag_parsed))
            {
                bigQuery.NullableFlag = NullableFlag_parsed;
            }

            bigQuery.ValueWithAlias = httpContext.Request.Form["aliased"];
            bigQuery.ListValues = new System.Collections.Generic.List<string>();
            bigQuery.ListValues.AddRange(httpContext.Request.Form["ListValues"]);
            bigQuery.EnumListValues = new System.Collections.Generic.List<WolverineWebApi.Direction>();
            foreach (var EnumListValuesValue in httpContext.Request.Form["EnumListValues"])
            {
                if (WolverineWebApi.Direction.TryParse<WolverineWebApi.Direction>(EnumListValuesValue, true, out var EnumListValuesValueParsed))
                {
                    bigQuery.EnumListValues.Add(EnumListValuesValueParsed);
                }

            }

            bigQuery.IntList = new System.Collections.Generic.List<int>();
            foreach (var IntListValue in httpContext.Request.Form["IntList"])
            {
                if (int.TryParse(IntListValue, System.Globalization.CultureInfo.InvariantCulture, out var IntListValueParsed))
                {
                    bigQuery.IntList.Add(IntListValueParsed);
                }

            }

            
            // The actual HTTP request handler execution
            var bigQuery_response = WolverineWebApi.FromFormEndpoints.Post(bigQuery);

            // Writing the response body to JSON because this was the first 'return variable' in the method signature
            await WriteJsonAsync(httpContext, bigQuery_response);
        }

    }

    // END: POST_api_fromformbigquery
    
    
}

