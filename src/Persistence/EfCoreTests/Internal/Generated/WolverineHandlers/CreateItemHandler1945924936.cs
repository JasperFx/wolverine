// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.DependencyInjection;
using Wolverine.EntityFrameworkCore;

namespace Internal.Generated.WolverineHandlers
{
    // START: CreateItemHandler1945924936
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class CreateItemHandler1945924936 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Wolverine.EntityFrameworkCore.IDbContextOutboxFactory _dbContextOutboxFactory;
        private readonly Microsoft.Extensions.DependencyInjection.IServiceScopeFactory _serviceScopeFactory;

        public CreateItemHandler1945924936(Wolverine.EntityFrameworkCore.IDbContextOutboxFactory dbContextOutboxFactory, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory)
        {
            _dbContextOutboxFactory = dbContextOutboxFactory;
            _serviceScopeFactory = serviceScopeFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            var tenantIdentifier = new JasperFx.MultiTenancy.TenantId(context.TenantId);
            using var serviceScope = _serviceScopeFactory.CreateScope();
            
            /*
            * Dependency: Descriptor: ServiceType: Microsoft.EntityFrameworkCore.DbContextOptions"1[SharedPersistenceModels.Items.SampleDbContext] Lifetime: Scoped ImplementationFactory: Microsoft.EntityFrameworkCore.DbContextOptions"1[SharedPersistenceModels.Items.SampleDbContext] CreateDbContextOptions[SampleDbContext](System.IServiceProvider)
            * The service registration for Microsoft.EntityFrameworkCore.DbContextOptions<SharedPersistenceModels.Items.SampleDbContext> is an 'opaque' lambda factory with the Scoped lifetime and requires service location
            */
            var sampleDbContext = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<SharedPersistenceModels.Items.SampleDbContext>(serviceScope.ServiceProvider);
            // The actual message body
            var createItem = (EfCoreTests.CreateItem)context.Envelope.Message;

            var createItemHandler = new EfCoreTests.CreateItemHandler();
            var myMessageHandler = new EfCoreTests.MultiTenancy.MyMessageHandler(_dbContextOutboxFactory);
            
            // The actual message execution
            await createItemHandler.Handle(createItem, sampleDbContext).ConfigureAwait(false);

            
            // The actual message execution
            await myMessageHandler.HandleAsync(createItem, tenantIdentifier, cancellation).ConfigureAwait(false);

        }

    }

    // END: CreateItemHandler1945924936
    
    
}

