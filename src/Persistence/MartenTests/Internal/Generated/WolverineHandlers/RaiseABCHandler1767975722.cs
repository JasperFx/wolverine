// <auto-generated/>
#pragma warning disable
using Wolverine.Marten.Publishing;

namespace Internal.Generated.WolverineHandlers
{
    // START: RaiseABCHandler1767975722
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class RaiseABCHandler1767975722 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Wolverine.Marten.Publishing.OutboxedSessionFactory _outboxedSessionFactory;

        public RaiseABCHandler1767975722(Wolverine.Marten.Publishing.OutboxedSessionFactory outboxedSessionFactory)
        {
            _outboxedSessionFactory = outboxedSessionFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            // The actual message body
            var raiseABC = (MartenTests.AggregateHandlerWorkflow.RaiseABC)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "MartenTests.AggregateHandlerWorkflow.RaiseLetterHandler");
            await using var documentSession = _outboxedSessionFactory.OpenSession(context);
            var eventStoreOperations = documentSession.Events;
            var aggregateId = raiseABC.LetterAggregateId;
            
            // Loading Marten aggregate
            var eventStream = await eventStoreOperations.FetchForWriting<MartenTests.AggregateHandlerWorkflow.LetterAggregate>(aggregateId, cancellation).ConfigureAwait(false);

            
            // The actual message execution
            (var outgoing1, var outgoing2) = MartenTests.AggregateHandlerWorkflow.RaiseLetterHandler.Handle(raiseABC, eventStream.Aggregate);

            if (outgoing1 != null)
            {
                
                // Capturing any possible events returned from the command handlers
                eventStream.AppendMany(outgoing1);

            }

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing2).ConfigureAwait(false);

            await documentSession.SaveChangesAsync(cancellation).ConfigureAwait(false);
        }

    }

    // END: RaiseABCHandler1767975722
    
    
}

