// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.Logging;
using Wolverine.Marten.Publishing;

namespace Internal.Generated.WolverineHandlers
{
    // START: IncrementBHandler17491959
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IncrementBHandler17491959 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.Extensions.Logging.ILogger<MartenTests.AggregateHandlerWorkflow.LetterAggregateHandler> _logger;
        private readonly Wolverine.Marten.Publishing.OutboxedSessionFactory _outboxedSessionFactory;

        public IncrementBHandler17491959(Microsoft.Extensions.Logging.ILogger<MartenTests.AggregateHandlerWorkflow.LetterAggregateHandler> logger, Wolverine.Marten.Publishing.OutboxedSessionFactory outboxedSessionFactory)
        {
            _logger = logger;
            _outboxedSessionFactory = outboxedSessionFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            // The actual message body
            var incrementB = (MartenTests.AggregateHandlerWorkflow.IncrementB)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "MartenTests.AggregateHandlerWorkflow.LetterAggregateHandler");
            await using var documentSession = _outboxedSessionFactory.OpenSession(context);
            var eventStoreOperations = documentSession.Events;
            var aggregateId = incrementB.LetterAggregateId;
            
            // Loading Marten aggregate
            var eventStream = await eventStoreOperations.FetchForWriting<MartenTests.AggregateHandlerWorkflow.LetterAggregate>(aggregateId, cancellation).ConfigureAwait(false);

            var letterAggregateHandler = new MartenTests.AggregateHandlerWorkflow.LetterAggregateHandler();
            
            // The actual message execution
            var outgoing1 = await letterAggregateHandler.Handle(incrementB, eventStream.Aggregate, _logger).ConfigureAwait(false);

            eventStream.AppendOne(outgoing1);
            await documentSession.SaveChangesAsync(cancellation).ConfigureAwait(false);
        }

    }

    // END: IncrementBHandler17491959
    
    
}

