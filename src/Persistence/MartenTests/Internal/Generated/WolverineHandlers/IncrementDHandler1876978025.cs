// <auto-generated/>
#pragma warning disable
using Wolverine.Marten.Publishing;

namespace Internal.Generated.WolverineHandlers
{
    // START: IncrementDHandler1876978025
    public class IncrementDHandler1876978025 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Wolverine.Marten.Publishing.OutboxedSessionFactory _outboxedSessionFactory;

        public IncrementDHandler1876978025(Wolverine.Marten.Publishing.OutboxedSessionFactory outboxedSessionFactory)
        {
            _outboxedSessionFactory = outboxedSessionFactory;
        }

        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            var letterAggregateHandler = new MartenTests.LetterAggregateHandler();
            // The actual message body
            var incrementD = (MartenTests.IncrementD)context.Envelope.Message;

            await using var documentSession = _outboxedSessionFactory.OpenSession(context);
            var eventStore = documentSession.Events;
            
            // Loading Marten aggregate
            var eventStream = await eventStore.FetchForWriting<MartenTests.LetterAggregate>(incrementD.LetterAggregateId, cancellation).ConfigureAwait(false);

            
            // The actual message execution
            await letterAggregateHandler.Handle(incrementD, eventStream).ConfigureAwait(false);

            await documentSession.SaveChangesAsync(cancellation).ConfigureAwait(false);
        }
    }

    // END: IncrementDHandler1876978025
    
    
}