// <auto-generated/>
#pragma warning disable
using Wolverine.Marten.Publishing;

namespace Internal.Generated.WolverineHandlers
{
    // START: RaiseHandler985277900
    public class RaiseHandler985277900 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Wolverine.Marten.Publishing.OutboxedSessionFactory _outboxedSessionFactory;

        public RaiseHandler985277900(Wolverine.Marten.Publishing.OutboxedSessionFactory outboxedSessionFactory)
        {
            _outboxedSessionFactory = outboxedSessionFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            // The actual message body
            var raise = (MartenTests.Raise)context.Envelope.Message;

            await using var documentSession = _outboxedSessionFactory.OpenSession(context);
            var eventStore = documentSession.Events;
            var aggregateId = raise.LetterAggregateId;
            
            // Loading Marten aggregate
            var eventStream = await eventStore.FetchForWriting<MartenTests.LetterAggregate>(aggregateId, cancellation).ConfigureAwait(false);

            
            // The actual message execution
            (var outgoing1, var outgoing2) = MartenTests.RaiseLetterHandler.Handle(raise, eventStream.Aggregate);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

            if (outgoing2 != null)
            {
                
                // Capturing any possible events returned from the command handlers
                eventStream.AppendMany(outgoing2);

            }

            await documentSession.SaveChangesAsync(cancellation).ConfigureAwait(false);
            var response_of_letterAggregate = await eventStore.FetchLatest<MartenTests.LetterAggregate>(aggregateId, cancellation);
            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(response_of_letterAggregate).ConfigureAwait(false);

        }

    }

    // END: RaiseHandler985277900
    
    
}

